SOTD: The General - Dispatch

Aim : How do we flag down a resource?
* Semaphores (created by Edsger Dijkstra)
- IPC construct used to control access to a shared resource (like a file or shared memory).
- Essentially, a semaphore is a counter that represents how many processes can access a resource at any given time.
  - If a semaphore has a value of 3, then it can have 3 active "users".
  - If a semaphore has a value of 0, then it is unavailable.
- Most semaphore operations are "atomic", meaning they will not be split up into multiple processor instructions.
  - This means that requesting and releasing semaphores cannot be interrupted
  - The OS usually breaks operations up into the smallest size command possible, meaning other parts of commands may be able to interrupt the command that was broken up.
- Semaphore operations:
  - Create a semaphore
    - Make a new semaphore OR get an existing semaphore
  - Set an initial value
    - Should probably happen when you create a semaphore
  - Up(S) / V(S)
    - Release the semaphore to signal you are done with its associated resource
    - When you release it, you add one to the semaphore so you "up" the semaphore
    - pseudocode: S++ (if S is your semaphore)
  - Down(S) / P(S)
    - Attempt to take the semaphore
    - If the semaphore is 0, wait for it to be available
    - pseudocode: while(S == 0){ block; } S--
  - Removing a semaphore
* Semaphore code
*** semget - <sys/types.h> <sys/ipc.h> <sys/sem.h>
- Create/Get access to a semaphore.
- This is not the same as Up(S) or Down(S), the semaphore is not modified by semget.
  - In fact, there is NO way to modify the value of the semaphore using semget
- When you first make a semaphore, the value will be 0. This means the semaphore is useless until you set its value.
- Returns a semaphore descriptor or -1 (errno)
- semget( <KEY>, <AMOUNT>, <FLAGS> )
  - KEY
    - Unique semaphore identifier (use ftok)
  - AMOUNT
    - We will be using system 5 semaphores (instead of posix semaphores)
    - A system 5 semaphore is made of a set of semaphores. This could be useful in some ways such as having 10 semaphores for readers and 1 semaphore for writers.
      - You could do this with regular semaphores and just subtract a higher amount (i.e. 10) when a writer comes in
    - Semaphores are actually stored as sets with possibly many semaphores stored together. This parameter sets the number of semaphores to create/get
  - FLAGS
    - Includes permissions for the semaphore
    - Combine with bitwise or
    - IPC_CREAT
      - create the semaphore
      - will set value to 0
    - IPC_EXCL
      - Fail if the semaphore already exists and IPC_CREAT is on
  - example:
    - int semd'
    - semd = semget( ftok("file/dir", 2), 1, 0664 | IPC_CREAT );
